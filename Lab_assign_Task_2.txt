#include <GL/glut.h>
#include <cmath>
#include <cstdio>

int centerX = 320;
int centerY = 240;
int baseRadius = 20;
int numCircles = 12;
int gap = 18;

void myInit() {
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 640.0, 0.0, 480.0);
	glPointSize(1.0f);
}

void plot8(int cx, int cy, int x, int y) {
	glVertex2i(cx + x, cy + y);
	glVertex2i(cx - x, cy + y);
	glVertex2i(cx + x, cy - y);
	glVertex2i(cx - x, cy - y);
	glVertex2i(cx + y, cy + x);
	glVertex2i(cx - y, cy + x);
	glVertex2i(cx + y, cy - x);
	glVertex2i(cx - y, cy - x);
}

void drawMidpointCircle(int cx, int cy, int r) {
	if (r < 0) return;
	int x = 0;
	int y = r;
	int d = 1 - r;
	glBegin(GL_POINTS);
	plot8(cx, cy, x, y);
	while (x < y) {
		if (d < 0) {
			d += 2 * x + 3;
		} else {
			d += 2 * (x - y) + 5;
			y--;
		}
		x++;
		plot8(cx, cy, x, y);
	}
	glEnd();
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT);
	for (int i = 0; i < numCircles; ++i) {
		float t = (numCircles == 1) ? 0.0f : (float)i / (numCircles - 1);
		float r1 = 1.0f * (1.0f - t) + 0.0f * t;
		float g1 = 0.0f * (1.0f - t) + 0.6f * t;
		float b1 = 0.0f * (1.0f - t) + 1.0f * t;
		glColor3f(r1, g1, b1);
		int radius = baseRadius + i * gap;
		int thickness = 1 + i / 1;
		for (int w = 0; w < thickness; ++w) {
			drawMidpointCircle(centerX, centerY, radius + w);
		}
	}
	glFlush();
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(640, 480);
	glutInitWindowPosition(100, 150);
	glutCreateWindow("Concentric Circles with Gradient and Thickness");
	myInit();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}
